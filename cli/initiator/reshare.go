package initiator

import (
	"fmt"
	"os"
	"time"

	"github.com/spf13/cobra"
	"go.uber.org/zap"

	cli_utils "github.com/bloxapp/ssv-dkg/cli/utils"
	"github.com/bloxapp/ssv-dkg/pkgs/crypto"
	"github.com/bloxapp/ssv-dkg/pkgs/initiator"
)

func init() {
	cli_utils.SetReshareFlags(StartReshare)
}

var StartReshare = &cobra.Command{
	Use:   "reshare",
	Short: "Reshare an existing key to new operators",
	RunE: func(cmd *cobra.Command, args []string) error {
		fmt.Println(`
		â–“â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–„  â–ˆâ–ˆ â–„â–ˆâ–€  â–„â–ˆâ–ˆâ–ˆâ–ˆ     â–ˆâ–ˆâ–€â–ˆâ–ˆâ–ˆ  â–“â–ˆâ–ˆâ–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ  â–ˆâ–ˆâ–‘ â–ˆâ–ˆ  â–„â–„â–„       â–ˆâ–ˆâ–€â–ˆâ–ˆâ–ˆ  â–“â–ˆâ–ˆâ–ˆâ–ˆâ–ˆ 
		â–’â–ˆâ–ˆâ–€ â–ˆâ–ˆâ–Œ â–ˆâ–ˆâ–„â–ˆâ–’  â–ˆâ–ˆâ–’ â–€â–ˆâ–’   â–“â–ˆâ–ˆ â–’ â–ˆâ–ˆâ–’â–“â–ˆ   â–€ â–’â–ˆâ–ˆ    â–’ â–“â–ˆâ–ˆâ–‘ â–ˆâ–ˆâ–’â–’â–ˆâ–ˆâ–ˆâ–ˆâ–„    â–“â–ˆâ–ˆ â–’ â–ˆâ–ˆâ–’â–“â–ˆ   â–€ 
		â–‘â–ˆâ–ˆ   â–ˆâ–Œâ–“â–ˆâ–ˆâ–ˆâ–„â–‘ â–’â–ˆâ–ˆâ–‘â–„â–„â–„â–‘   â–“â–ˆâ–ˆ â–‘â–„â–ˆ â–’â–’â–ˆâ–ˆâ–ˆ   â–‘ â–“â–ˆâ–ˆâ–„   â–’â–ˆâ–ˆâ–€â–€â–ˆâ–ˆâ–‘â–’â–ˆâ–ˆ  â–€â–ˆâ–„  â–“â–ˆâ–ˆ â–‘â–„â–ˆ â–’â–’â–ˆâ–ˆâ–ˆ   
		â–‘â–“â–ˆâ–„   â–Œâ–“â–ˆâ–ˆ â–ˆâ–„ â–‘â–“â–ˆ  â–ˆâ–ˆâ–“   â–’â–ˆâ–ˆâ–€â–€â–ˆâ–„  â–’â–“â–ˆ  â–„   â–’   â–ˆâ–ˆâ–’â–‘â–“â–ˆ â–‘â–ˆâ–ˆ â–‘â–ˆâ–ˆâ–„â–„â–„â–„â–ˆâ–ˆ â–’â–ˆâ–ˆâ–€â–€â–ˆâ–„  â–’â–“â–ˆ  â–„ 
		â–‘â–’â–ˆâ–ˆâ–ˆâ–ˆâ–“ â–’â–ˆâ–ˆâ–’ â–ˆâ–„â–‘â–’â–“â–ˆâ–ˆâ–ˆâ–€â–’   â–‘â–ˆâ–ˆâ–“ â–’â–ˆâ–ˆâ–’â–‘â–’â–ˆâ–ˆâ–ˆâ–ˆâ–’â–’â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–’â–’â–‘â–“â–ˆâ–’â–‘â–ˆâ–ˆâ–“ â–“â–ˆ   â–“â–ˆâ–ˆâ–’â–‘â–ˆâ–ˆâ–“ â–’â–ˆâ–ˆâ–’â–‘â–’â–ˆâ–ˆâ–ˆâ–ˆâ–’
		â–’â–’â–“  â–’ â–’ â–’â–’ â–“â–’ â–‘â–’   â–’    â–‘ â–’â–“ â–‘â–’â–“â–‘â–‘â–‘ â–’â–‘ â–‘â–’ â–’â–“â–’ â–’ â–‘ â–’ â–‘â–‘â–’â–‘â–’ â–’â–’   â–“â–’â–ˆâ–‘â–‘ â–’â–“ â–‘â–’â–“â–‘â–‘â–‘ â–’â–‘ â–‘
		â–‘ â–’  â–’ â–‘ â–‘â–’ â–’â–‘  â–‘   â–‘      â–‘â–’ â–‘ â–’â–‘ â–‘ â–‘  â–‘â–‘ â–‘â–’  â–‘ â–‘ â–’ â–‘â–’â–‘ â–‘  â–’   â–’â–’ â–‘  â–‘â–’ â–‘ â–’â–‘ â–‘ â–‘  â–‘
		â–‘ â–‘  â–‘ â–‘ â–‘â–‘ â–‘ â–‘ â–‘   â–‘      â–‘â–‘   â–‘    â–‘   â–‘  â–‘  â–‘   â–‘  â–‘â–‘ â–‘  â–‘   â–’     â–‘â–‘   â–‘    â–‘   
		â–‘    â–‘  â–‘         â–‘       â–‘        â–‘  â–‘      â–‘   â–‘  â–‘  â–‘      â–‘  â–‘   â–‘        â–‘  â–‘
		â–‘`)
		if err := cli_utils.SetViperConfig(cmd); err != nil {
			return err
		}
		if err := cli_utils.BindReshareFlags(cmd); err != nil {
			return err
		}
		logger, err := cli_utils.SetGlobalLogger(cmd, "dkg-initiator")
		if err != nil {
			return err
		}
		defer logger.Sync()
		logger.Info("ðŸª› Initiator`s", zap.String("Version", cmd.Version))
		opMap, err := cli_utils.LoadOperators(logger)
		if err != nil {
			logger.Fatal("ðŸ˜¥ Failed to load operators: ", zap.Error(err))
		}
		newParts, err := cli_utils.StingSliceToUintArray(cli_utils.NewOperatorIDs)
		if err != nil {
			logger.Fatal("ðŸ˜¥ Failed to load new participants: ", zap.Error(err))
		}
		logger.Info("ðŸ”‘ opening initiator RSA private key file")
		privateKey, err := cli_utils.LoadInitiatorRSAPrivKey(false)
		if err != nil {
			logger.Fatal("ðŸ˜¥ Failed to load private key: ", zap.Error(err))
		}
		// create initiator instance
		dkgInitiator := initiator.New(privateKey, opMap, logger, cmd.Version)
		// create a new ID for resharing
		id := crypto.NewID()
		keyshares, err := os.ReadFile(cli_utils.KeysharesFilePath)
		if err != nil {
			logger.Fatal("ðŸ˜¥ Failed to read keyshares json file:", zap.Error(err))
		}
		// ceremonySigs, err := os.ReadFile(cli_utils.CeremonySigsFilePath)
		// if err != nil {
		// 	logger.Fatal("ðŸ˜¥ Failed to read ceremony signatures json file:", zap.Error(err))
		// }
		// Start the ceremony
		keyShares, _, err := dkgInitiator.StartReshare(id, newParts, keyshares, nil, cli_utils.Nonce)
		if err != nil {
			logger.Fatal("ðŸ˜¥ Failed to initiate DKG ceremony: ", zap.Error(err))
		}
		// Save results
		logger.Info("ðŸ’¾ Writing keyshares payload to file")
		timestamp := time.Now().Format(time.RFC3339)
		dir := fmt.Sprintf("%s/ceremony-%s", cli_utils.OutputPath, timestamp)
		err = os.Mkdir(dir, os.ModePerm)
		if err != nil {
			return err
		}
		err = cli_utils.WriteKeysharesResult(keyShares, dir)
		if err != nil {
			logger.Fatal("ðŸ˜¥ Failed to write new ceremony signatures: ", zap.Error(err))
		}
		// err = cli_utils.WriteCeremonySigs(ceremonySigsNew, dir)
		// if err != nil {
		// 	return err
		// }
		fmt.Println(`
		â–“â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–„  â–ˆâ–ˆâ–“  â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ  â–„â–ˆâ–ˆâ–ˆâ–ˆâ–„   â–ˆâ–ˆâ–“    â–„â–„â–„       â–ˆâ–ˆâ–“ â–ˆâ–ˆâ–ˆâ–„ â–„â–ˆâ–ˆâ–ˆâ–“â–“â–ˆâ–ˆâ–ˆâ–ˆâ–ˆ  â–ˆâ–ˆâ–€â–ˆâ–ˆâ–ˆ  
		â–’â–ˆâ–ˆâ–€ â–ˆâ–ˆâ–Œâ–“â–ˆâ–ˆâ–’â–’â–ˆâ–ˆ    â–’ â–’â–ˆâ–ˆâ–€ â–€â–ˆ  â–“â–ˆâ–ˆâ–’   â–’â–ˆâ–ˆâ–ˆâ–ˆâ–„    â–“â–ˆâ–ˆâ–’â–“â–ˆâ–ˆâ–’â–€â–ˆâ–€ â–ˆâ–ˆâ–’â–“â–ˆ   â–€ â–“â–ˆâ–ˆ â–’ â–ˆâ–ˆâ–’
		â–‘â–ˆâ–ˆ   â–ˆâ–Œâ–’â–ˆâ–ˆâ–’â–‘ â–“â–ˆâ–ˆâ–„   â–’â–“â–ˆ    â–„ â–’â–ˆâ–ˆâ–‘   â–’â–ˆâ–ˆ  â–€â–ˆâ–„  â–’â–ˆâ–ˆâ–’â–“â–ˆâ–ˆ    â–“â–ˆâ–ˆâ–‘â–’â–ˆâ–ˆâ–ˆ   â–“â–ˆâ–ˆ â–‘â–„â–ˆ â–’
		â–‘â–“â–ˆâ–„   â–Œâ–‘â–ˆâ–ˆâ–‘  â–’   â–ˆâ–ˆâ–’â–’â–“â–“â–„ â–„â–ˆâ–ˆâ–’â–’â–ˆâ–ˆâ–‘   â–‘â–ˆâ–ˆâ–„â–„â–„â–„â–ˆâ–ˆ â–‘â–ˆâ–ˆâ–‘â–’â–ˆâ–ˆ    â–’â–ˆâ–ˆ â–’â–“â–ˆ  â–„ â–’â–ˆâ–ˆâ–€â–€â–ˆâ–„  
		â–‘â–’â–ˆâ–ˆâ–ˆâ–ˆâ–“ â–‘â–ˆâ–ˆâ–‘â–’â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–’â–’â–’ â–“â–ˆâ–ˆâ–ˆâ–€ â–‘â–‘â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–’â–“â–ˆ   â–“â–ˆâ–ˆâ–’â–‘â–ˆâ–ˆâ–‘â–’â–ˆâ–ˆâ–’   â–‘â–ˆâ–ˆâ–’â–‘â–’â–ˆâ–ˆâ–ˆâ–ˆâ–’â–‘â–ˆâ–ˆâ–“ â–’â–ˆâ–ˆâ–’
		 â–’â–’â–“  â–’ â–‘â–“  â–’ â–’â–“â–’ â–’ â–‘â–‘ â–‘â–’ â–’  â–‘â–‘ â–’â–‘â–“  â–‘â–’â–’   â–“â–’â–ˆâ–‘â–‘â–“  â–‘ â–’â–‘   â–‘  â–‘â–‘â–‘ â–’â–‘ â–‘â–‘ â–’â–“ â–‘â–’â–“â–‘
		 â–‘ â–’  â–’  â–’ â–‘â–‘ â–‘â–’  â–‘ â–‘  â–‘  â–’   â–‘ â–‘ â–’  â–‘ â–’   â–’â–’ â–‘ â–’ â–‘â–‘  â–‘      â–‘ â–‘ â–‘  â–‘  â–‘â–’ â–‘ â–’â–‘
		 â–‘ â–‘  â–‘  â–’ â–‘â–‘  â–‘  â–‘  â–‘          â–‘ â–‘    â–‘   â–’    â–’ â–‘â–‘      â–‘      â–‘     â–‘â–‘   â–‘ 
		   â–‘     â–‘        â–‘  â–‘ â–‘          â–‘  â–‘     â–‘  â–‘ â–‘         â–‘      â–‘  â–‘   â–‘     
		 â–‘                   â–‘                                                        
		 
		 This tool was not audited.
		 When using distributed key generation you understand all the risks involved with
		 experimental cryptography.  
		 `)
		return nil
	},
}
