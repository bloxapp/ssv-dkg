package initiator

import (
	"fmt"

	"github.com/spf13/cobra"
	spec "github.com/ssvlabs/dkg-spec"
	"go.uber.org/zap"

	e2m_core "github.com/bloxapp/eth2-key-manager/core"
	cli_utils "github.com/bloxapp/ssv-dkg/cli/utils"
	"github.com/bloxapp/ssv-dkg/pkgs/initiator"
	"github.com/bloxapp/ssv-dkg/pkgs/wire"
)

func init() {
	cli_utils.SetReshareFlags(StartReshare)
}

var StartReshare = &cobra.Command{
	Use:   "reshare",
	Short: "Reshare an existing key to new operators",
	RunE: func(cmd *cobra.Command, args []string) error {
		fmt.Println(`
		â–“â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–„  â–ˆâ–ˆ â–„â–ˆâ–€  â–„â–ˆâ–ˆâ–ˆâ–ˆ     â–ˆâ–ˆâ–€â–ˆâ–ˆâ–ˆ  â–“â–ˆâ–ˆâ–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ  â–ˆâ–ˆâ–‘ â–ˆâ–ˆ  â–„â–„â–„       â–ˆâ–ˆâ–€â–ˆâ–ˆâ–ˆ  â–“â–ˆâ–ˆâ–ˆâ–ˆâ–ˆ 
		â–’â–ˆâ–ˆâ–€ â–ˆâ–ˆâ–Œ â–ˆâ–ˆâ–„â–ˆâ–’  â–ˆâ–ˆâ–’ â–€â–ˆâ–’   â–“â–ˆâ–ˆ â–’ â–ˆâ–ˆâ–’â–“â–ˆ   â–€ â–’â–ˆâ–ˆ    â–’ â–“â–ˆâ–ˆâ–‘ â–ˆâ–ˆâ–’â–’â–ˆâ–ˆâ–ˆâ–ˆâ–„    â–“â–ˆâ–ˆ â–’ â–ˆâ–ˆâ–’â–“â–ˆ   â–€ 
		â–‘â–ˆâ–ˆ   â–ˆâ–Œâ–“â–ˆâ–ˆâ–ˆâ–„â–‘ â–’â–ˆâ–ˆâ–‘â–„â–„â–„â–‘   â–“â–ˆâ–ˆ â–‘â–„â–ˆ â–’â–’â–ˆâ–ˆâ–ˆ   â–‘ â–“â–ˆâ–ˆâ–„   â–’â–ˆâ–ˆâ–€â–€â–ˆâ–ˆâ–‘â–’â–ˆâ–ˆ  â–€â–ˆâ–„  â–“â–ˆâ–ˆ â–‘â–„â–ˆ â–’â–’â–ˆâ–ˆâ–ˆ   
		â–‘â–“â–ˆâ–„   â–Œâ–“â–ˆâ–ˆ â–ˆâ–„ â–‘â–“â–ˆ  â–ˆâ–ˆâ–“   â–’â–ˆâ–ˆâ–€â–€â–ˆâ–„  â–’â–“â–ˆ  â–„   â–’   â–ˆâ–ˆâ–’â–‘â–“â–ˆ â–‘â–ˆâ–ˆ â–‘â–ˆâ–ˆâ–„â–„â–„â–„â–ˆâ–ˆ â–’â–ˆâ–ˆâ–€â–€â–ˆâ–„  â–’â–“â–ˆ  â–„ 
		â–‘â–’â–ˆâ–ˆâ–ˆâ–ˆâ–“ â–’â–ˆâ–ˆâ–’ â–ˆâ–„â–‘â–’â–“â–ˆâ–ˆâ–ˆâ–€â–’   â–‘â–ˆâ–ˆâ–“ â–’â–ˆâ–ˆâ–’â–‘â–’â–ˆâ–ˆâ–ˆâ–ˆâ–’â–’â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–’â–’â–‘â–“â–ˆâ–’â–‘â–ˆâ–ˆâ–“ â–“â–ˆ   â–“â–ˆâ–ˆâ–’â–‘â–ˆâ–ˆâ–“ â–’â–ˆâ–ˆâ–’â–‘â–’â–ˆâ–ˆâ–ˆâ–ˆâ–’
		â–’â–’â–“  â–’ â–’ â–’â–’ â–“â–’ â–‘â–’   â–’    â–‘ â–’â–“ â–‘â–’â–“â–‘â–‘â–‘ â–’â–‘ â–‘â–’ â–’â–“â–’ â–’ â–‘ â–’ â–‘â–‘â–’â–‘â–’ â–’â–’   â–“â–’â–ˆâ–‘â–‘ â–’â–“ â–‘â–’â–“â–‘â–‘â–‘ â–’â–‘ â–‘
		â–‘ â–’  â–’ â–‘ â–‘â–’ â–’â–‘  â–‘   â–‘      â–‘â–’ â–‘ â–’â–‘ â–‘ â–‘  â–‘â–‘ â–‘â–’  â–‘ â–‘ â–’ â–‘â–’â–‘ â–‘  â–’   â–’â–’ â–‘  â–‘â–’ â–‘ â–’â–‘ â–‘ â–‘  â–‘
		â–‘ â–‘  â–‘ â–‘ â–‘â–‘ â–‘ â–‘ â–‘   â–‘      â–‘â–‘   â–‘    â–‘   â–‘  â–‘  â–‘   â–‘  â–‘â–‘ â–‘  â–‘   â–’     â–‘â–‘   â–‘    â–‘   
		â–‘    â–‘  â–‘         â–‘       â–‘        â–‘  â–‘      â–‘   â–‘  â–‘  â–‘      â–‘  â–‘   â–‘        â–‘  â–‘
		â–‘`)
		if err := cli_utils.SetViperConfig(cmd); err != nil {
			return err
		}
		if err := cli_utils.BindReshareFlags(cmd); err != nil {
			return err
		}
		logger, err := cli_utils.SetGlobalLogger(cmd, "dkg-initiator")
		if err != nil {
			return err
		}
		defer logger.Sync()
		logger.Info("ðŸª› Initiator`s", zap.String("Version", cmd.Version))
		opMap, err := cli_utils.LoadOperators(logger)
		if err != nil {
			logger.Fatal("ðŸ˜¥ Failed to load operators: ", zap.Error(err))
		}
		oldOperatorIDs, err := cli_utils.StingSliceToUintArray(cli_utils.OperatorIDs)
		if err != nil {
			logger.Fatal("ðŸ˜¥ Failed to load participants: ", zap.Error(err))
		}
		newOperatorIDs, err := cli_utils.StingSliceToUintArray(cli_utils.NewOperatorIDs)
		if err != nil {
			logger.Fatal("ðŸ˜¥ Failed to load new participants: ", zap.Error(err))
		}
		// create a new ID for resharing
		id := spec.NewID()
		// create initiator instance
		dkgInitiator, err := initiator.New(opMap.Clone(), logger, cmd.Version, cli_utils.ClientCACertPath)
		if err != nil {
			return err
		}
		signedProofs, err := wire.LoadProofs(cli_utils.ProofsFilePath)
		if err != nil {
			logger.Fatal("ðŸ˜¥ Failed to read proofs json file:", zap.Error(err))
		}
		proofsData := wire.ConvertSignedProofsToSpec(signedProofs)
		ethnetwork := e2m_core.MainNetwork
		if cli_utils.Network != "now_test_network" {
			ethnetwork = e2m_core.NetworkFromString(cli_utils.Network)
		}
		// Start the ceremony
		// TODO: Sign EIP1271
		keyShares, proof, err := dkgInitiator.StartResharing(id, oldOperatorIDs, newOperatorIDs, proofsData, ethnetwork, cli_utils.WithdrawAddress.Bytes(), cli_utils.OwnerAddress, cli_utils.Nonce, []byte{})
		if err != nil {
			logger.Fatal("ðŸ˜¥ Failed to initiate DKG ceremony: ", zap.Error(err))
		}
		var keySharesArr []*wire.KeySharesCLI
		var proofs [][]*wire.SignedProof
		keySharesArr = append(keySharesArr, keyShares)
		proofs = append(proofs, proof)
		// Save results
		logger.Info("ðŸŽ¯ All data is validated.")
		if err := cli_utils.WriteResults(
			logger,
			nil,
			keySharesArr,
			proofs,
			false,
			len(proofsData),
			cli_utils.OwnerAddress,
			cli_utils.Nonce,
			cli_utils.WithdrawAddress,
			cli_utils.OutputPath,
		); err != nil {
			logger.Fatal("Could not save results", zap.Error(err))
		}
		logger.Info("ðŸš€ Resigning ceremony completed")
		return nil
	},
}
