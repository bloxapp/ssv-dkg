// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	client "github.com/bloxapp/ssv-dkg-tool/pkgs/client"
	dkg "github.com/bloxapp/ssv-dkg-tool/pkgs/dkg"
	wire "github.com/bloxapp/ssv-dkg-tool/pkgs/wire"
	types "github.com/bloxapp/ssv-spec/types"
	common "github.com/ethereum/go-ethereum/common"
	bls "github.com/herumi/bls-eth-go-binary/bls"
	gomock "go.uber.org/mock/gomock"
)

// MockDKGClient is a mock of DKGClient interface.
type MockDKGClient struct {
	ctrl     *gomock.Controller
	recorder *MockDKGClientMockRecorder
}

// MockDKGClientMockRecorder is the mock recorder for MockDKGClient.
type MockDKGClientMockRecorder struct {
	mock *MockDKGClient
}

// NewMockDKGClient creates a new mock instance.
func NewMockDKGClient(ctrl *gomock.Controller) *MockDKGClient {
	mock := &MockDKGClient{ctrl: ctrl}
	mock.recorder = &MockDKGClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDKGClient) EXPECT() *MockDKGClientMockRecorder {
	return m.recorder
}

// CreateVerifyFunc mocks base method.
func (m *MockDKGClient) CreateVerifyFunc(ops []*wire.Operator) (func(uint64, []byte, []byte) error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVerifyFunc", ops)
	ret0, _ := ret[0].(func(uint64, []byte, []byte) error)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVerifyFunc indicates an expected call of CreateVerifyFunc.
func (mr *MockDKGClientMockRecorder) CreateVerifyFunc(ops interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVerifyFunc", reflect.TypeOf((*MockDKGClient)(nil).CreateVerifyFunc), ops)
}

// PakeMultiple mocks base method.
func (m *MockDKGClient) PakeMultiple(id [24]byte, allmsgs [][]byte) (*wire.MultipleSignedTransports, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PakeMultiple", id, allmsgs)
	ret0, _ := ret[0].(*wire.MultipleSignedTransports)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PakeMultiple indicates an expected call of PakeMultiple.
func (mr *MockDKGClientMockRecorder) PakeMultiple(id, allmsgs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PakeMultiple", reflect.TypeOf((*MockDKGClient)(nil).PakeMultiple), id, allmsgs)
}

// ProcessDKGResultResponse mocks base method.
func (m *MockDKGClient) ProcessDKGResultResponse(responseResult [][]byte, id [24]byte) ([]dkg.Result, *bls.PublicKey, map[types.OperatorID]*bls.PublicKey, map[types.OperatorID]*bls.Sign, map[types.OperatorID]*bls.Sign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessDKGResultResponse", responseResult, id)
	ret0, _ := ret[0].([]dkg.Result)
	ret1, _ := ret[1].(*bls.PublicKey)
	ret2, _ := ret[2].(map[types.OperatorID]*bls.PublicKey)
	ret3, _ := ret[3].(map[types.OperatorID]*bls.Sign)
	ret4, _ := ret[4].(map[types.OperatorID]*bls.Sign)
	ret5, _ := ret[5].(error)
	return ret0, ret1, ret2, ret3, ret4, ret5
}

// ProcessDKGResultResponse indicates an expected call of ProcessDKGResultResponse.
func (mr *MockDKGClientMockRecorder) ProcessDKGResultResponse(responseResult, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessDKGResultResponse", reflect.TypeOf((*MockDKGClient)(nil).ProcessDKGResultResponse), responseResult, id)
}

// SendAndCollect mocks base method.
func (m *MockDKGClient) SendAndCollect(op client.Operator, method string, data []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAndCollect", op, method, data)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendAndCollect indicates an expected call of SendAndCollect.
func (mr *MockDKGClientMockRecorder) SendAndCollect(op, method, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndCollect", reflect.TypeOf((*MockDKGClient)(nil).SendAndCollect), op, method, data)
}

// SendExchangeMsgs mocks base method.
func (m *MockDKGClient) SendExchangeMsgs(exchangeMsgs [][]byte, id [24]byte) ([][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendExchangeMsgs", exchangeMsgs, id)
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendExchangeMsgs indicates an expected call of SendExchangeMsgs.
func (mr *MockDKGClientMockRecorder) SendExchangeMsgs(exchangeMsgs, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendExchangeMsgs", reflect.TypeOf((*MockDKGClient)(nil).SendExchangeMsgs), exchangeMsgs, id)
}

// SendInitMsg mocks base method.
func (m *MockDKGClient) SendInitMsg(init *wire.Init, id [24]byte) ([][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendInitMsg", init, id)
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendInitMsg indicates an expected call of SendInitMsg.
func (mr *MockDKGClientMockRecorder) SendInitMsg(init, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendInitMsg", reflect.TypeOf((*MockDKGClient)(nil).SendInitMsg), init, id)
}

// SendKyberMsgs mocks base method.
func (m *MockDKGClient) SendKyberMsgs(kyberDeals [][]byte, id [24]byte) ([][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendKyberMsgs", kyberDeals, id)
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendKyberMsgs indicates an expected call of SendKyberMsgs.
func (mr *MockDKGClientMockRecorder) SendKyberMsgs(kyberDeals, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendKyberMsgs", reflect.TypeOf((*MockDKGClient)(nil).SendKyberMsgs), kyberDeals, id)
}

// SendToAll mocks base method.
func (m *MockDKGClient) SendToAll(method string, msg []byte) ([][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendToAll", method, msg)
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendToAll indicates an expected call of SendToAll.
func (mr *MockDKGClientMockRecorder) SendToAll(method, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendToAll", reflect.TypeOf((*MockDKGClient)(nil).SendToAll), method, msg)
}

// StartDKG mocks base method.
func (m *MockDKGClient) StartDKG(withdraw []byte, ids []uint64, threshold uint64, fork [4]byte, forkName string, owner common.Address, nonce uint64) (*client.DepositDataJson, *client.KeyShares, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDKG", withdraw, ids, threshold, fork, forkName, owner, nonce)
	ret0, _ := ret[0].(*client.DepositDataJson)
	ret1, _ := ret[1].(*client.KeyShares)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// StartDKG indicates an expected call of StartDKG.
func (mr *MockDKGClientMockRecorder) StartDKG(withdraw, ids, threshold, fork, forkName, owner, nonce interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDKG", reflect.TypeOf((*MockDKGClient)(nil).StartDKG), withdraw, ids, threshold, fork, forkName, owner, nonce)
}
